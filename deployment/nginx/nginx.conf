# ======================================================
# HIGHERSELF NETWORK SERVER - NGINX CONFIGURATION
# Advanced load balancing and reverse proxy configuration
# ======================================================

# Main context
user nginx;
worker_processes auto;
error_log /var/log/nginx/error.log warn;
pid /var/run/nginx.pid;

# Worker connections and performance
events {
    worker_connections 1024;
    use epoll;
    multi_accept on;
}

# HTTP context
http {
    # Basic settings
    include /etc/nginx/mime.types;
    default_type application/octet-stream;
    
    # Logging format
    log_format main '$remote_addr - $remote_user [$time_local] "$request" '
                    '$status $body_bytes_sent "$http_referer" '
                    '"$http_user_agent" "$http_x_forwarded_for"';
    
    log_format detailed '$remote_addr - $remote_user [$time_local] "$request" '
                       '$status $body_bytes_sent "$http_referer" '
                       '"$http_user_agent" "$http_x_forwarded_for" '
                       'rt=$request_time uct="$upstream_connect_time" '
                       'uht="$upstream_header_time" urt="$upstream_response_time" '
                       'business_entity="$http_x_business_entity"';
    
    access_log /var/log/nginx/access.log detailed;
    
    # Performance settings
    sendfile on;
    tcp_nopush on;
    tcp_nodelay on;
    keepalive_timeout 65;
    types_hash_max_size 2048;
    client_max_body_size 100M;
    
    # Gzip compression
    gzip on;
    gzip_vary on;
    gzip_min_length 1024;
    gzip_proxied any;
    gzip_comp_level 6;
    gzip_types
        text/plain
        text/css
        text/xml
        text/javascript
        application/json
        application/javascript
        application/xml+rss
        application/atom+xml
        image/svg+xml;
    
    # Rate limiting
    limit_req_zone $binary_remote_addr zone=api:10m rate=100r/m;
    limit_req_zone $http_x_business_entity zone=entity:10m rate=200r/m;
    limit_conn_zone $binary_remote_addr zone=conn_limit_per_ip:10m;
    
    # Upstream servers for load balancing
    upstream higherself_api {
        least_conn;
        server higherself-server:8000 max_fails=3 fail_timeout=30s weight=1;
        # Additional servers for scaling
        # server higherself-server-2:8000 max_fails=3 fail_timeout=30s weight=1 backup;
        
        # Health check (requires nginx-plus or custom module)
        # health_check interval=30s fails=3 passes=2 uri=/health;
        
        keepalive 32;
    }
    
    upstream prometheus_backend {
        server prometheus:9090 max_fails=2 fail_timeout=30s;
        keepalive 8;
    }
    
    upstream grafana_backend {
        server grafana:3000 max_fails=2 fail_timeout=30s;
        keepalive 8;
    }
    
    upstream consul_backend {
        server consul:8500 max_fails=2 fail_timeout=30s;
        keepalive 8;
    }
    
    # Business entity routing map
    map $http_x_business_entity $entity_backend {
        default higherself_api;
        "the_7_space" higherself_api;
        "am_consulting" higherself_api;
        "higherself_core" higherself_api;
    }
    
    # SSL configuration
    ssl_protocols TLSv1.2 TLSv1.3;
    ssl_ciphers ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-RSA-AES128-GCM-SHA256:ECDHE-ECDSA-AES256-GCM-SHA384:ECDHE-RSA-AES256-GCM-SHA384;
    ssl_prefer_server_ciphers off;
    ssl_session_cache shared:SSL:10m;
    ssl_session_timeout 10m;
    
    # Security headers
    add_header X-Frame-Options DENY always;
    add_header X-Content-Type-Options nosniff always;
    add_header X-XSS-Protection "1; mode=block" always;
    add_header Referrer-Policy "strict-origin-when-cross-origin" always;
    add_header Content-Security-Policy "default-src 'self'; script-src 'self' 'unsafe-inline'; style-src 'self' 'unsafe-inline'; img-src 'self' data: https:; font-src 'self' data:; connect-src 'self' wss: https:;" always;
    
    # Main server block
    server {
        listen 80;
        listen [::]:80;
        server_name ${API_DOMAIN:-localhost} api.higherself.network;
        
        # Redirect HTTP to HTTPS in production
        if ($http_x_forwarded_proto != "https") {
            return 301 https://$server_name$request_uri;
        }
        
        # Health check endpoint (bypass rate limiting)
        location = /nginx-health {
            access_log off;
            return 200 "healthy\n";
            add_header Content-Type text/plain;
        }
        
        # Rate limiting
        limit_req zone=api burst=20 nodelay;
        limit_conn conn_limit_per_ip 10;
        
        # Main API proxy
        location / {
            # Business entity routing
            proxy_pass http://$entity_backend;
            
            # Proxy headers
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
            proxy_set_header X-Forwarded-Host $host;
            proxy_set_header X-Forwarded-Port $server_port;
            
            # Business entity header preservation
            proxy_set_header X-Business-Entity $http_x_business_entity;
            
            # Proxy timeouts
            proxy_connect_timeout 30s;
            proxy_send_timeout 60s;
            proxy_read_timeout 60s;
            
            # Proxy buffering
            proxy_buffering on;
            proxy_buffer_size 4k;
            proxy_buffers 8 4k;
            proxy_busy_buffers_size 8k;
            
            # Connection reuse
            proxy_http_version 1.1;
            proxy_set_header Connection "";
            
            # Error handling
            proxy_next_upstream error timeout invalid_header http_500 http_502 http_503 http_504;
            proxy_next_upstream_tries 3;
            proxy_next_upstream_timeout 30s;
        }
        
        # Health check endpoint
        location /health {
            proxy_pass http://higherself_api/health;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
            
            # Bypass rate limiting for health checks
            limit_req off;
            access_log off;
        }
        
        # API documentation
        location /docs {
            proxy_pass http://higherself_api/docs;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
        }
        
        # WebSocket support for real-time features
        location /ws {
            proxy_pass http://higherself_api;
            proxy_http_version 1.1;
            proxy_set_header Upgrade $http_upgrade;
            proxy_set_header Connection "upgrade";
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
            
            # WebSocket timeouts
            proxy_read_timeout 86400s;
            proxy_send_timeout 86400s;
        }
        
        # Static files (if any)
        location /static/ {
            alias /var/www/static/;
            expires 1y;
            add_header Cache-Control "public, immutable";
            access_log off;
        }
        
        # Monitoring endpoints (restricted access)
        location /metrics {
            # Restrict to monitoring network
            allow 172.23.0.0/24;
            deny all;
            
            proxy_pass http://higherself_api/metrics;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
            
            access_log off;
        }
    }
    
    # HTTPS server block
    server {
        listen 443 ssl http2;
        listen [::]:443 ssl http2;
        server_name ${API_DOMAIN:-localhost} api.higherself.network;
        
        # SSL certificates
        ssl_certificate /etc/nginx/ssl/higherself.crt;
        ssl_certificate_key /etc/nginx/ssl/higherself.key;
        
        # HSTS
        add_header Strict-Transport-Security "max-age=31536000; includeSubDomains" always;
        
        # Same location blocks as HTTP server
        include /etc/nginx/conf.d/api-locations.conf;
    }
    
    # Monitoring services
    server {
        listen 80;
        server_name monitoring.higherself.network grafana.higherself.network;
        
        # Grafana
        location / {
            proxy_pass http://grafana_backend;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
            
            # Grafana specific headers
            proxy_set_header X-Forwarded-Host $host;
            proxy_set_header X-Forwarded-Server $host;
        }
    }
    
    server {
        listen 80;
        server_name prometheus.higherself.network;
        
        # Prometheus
        location / {
            # Restrict access to monitoring network
            allow 172.23.0.0/24;
            allow 10.0.0.0/8;
            deny all;
            
            proxy_pass http://prometheus_backend;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
        }
    }
    
    server {
        listen 80;
        server_name consul.higherself.network;
        
        # Consul UI
        location / {
            # Restrict access to internal networks
            allow 172.20.0.0/16;
            allow 10.0.0.0/8;
            deny all;
            
            proxy_pass http://consul_backend;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
        }
    }
    
    # Business entity specific routing
    server {
        listen 80;
        server_name the-7-space.higherself.network;
        
        location / {
            proxy_pass http://higherself_api;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
            proxy_set_header X-Business-Entity "the_7_space";
            
            # Entity-specific rate limiting
            limit_req zone=entity burst=50 nodelay;
        }
    }
    
    server {
        listen 80;
        server_name am-consulting.higherself.network;
        
        location / {
            proxy_pass http://higherself_api;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
            proxy_set_header X-Business-Entity "am_consulting";
            
            # Entity-specific rate limiting
            limit_req zone=entity burst=100 nodelay;
        }
    }
    
    server {
        listen 80;
        server_name higherself-core.higherself.network;
        
        location / {
            proxy_pass http://higherself_api;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
            proxy_set_header X-Business-Entity "higherself_core";
            
            # Entity-specific rate limiting
            limit_req zone=entity burst=100 nodelay;
        }
    }
    
    # Default server (catch-all)
    server {
        listen 80 default_server;
        listen [::]:80 default_server;
        server_name _;
        
        # Return 444 for unknown hosts
        return 444;
    }
}

# Stream context for TCP/UDP load balancing
stream {
    # MongoDB load balancing (if multiple instances)
    upstream mongodb_backend {
        server mongodb:27017 max_fails=2 fail_timeout=30s;
        # server mongodb-replica:27017 max_fails=2 fail_timeout=30s;
    }
    
    # Redis load balancing (if multiple instances)
    upstream redis_backend {
        server redis:6379 max_fails=2 fail_timeout=30s;
        # server redis-replica:6379 max_fails=2 fail_timeout=30s;
    }
    
    # MongoDB proxy (internal only)
    server {
        listen 27017;
        proxy_pass mongodb_backend;
        proxy_timeout 1s;
        proxy_responses 1;
        
        # Restrict to internal networks
        allow 172.20.0.0/16;
        allow 172.21.0.0/24;
        deny all;
    }
    
    # Redis proxy (internal only)
    server {
        listen 6379;
        proxy_pass redis_backend;
        proxy_timeout 1s;
        proxy_responses 1;
        
        # Restrict to internal networks
        allow 172.20.0.0/16;
        allow 172.22.0.0/24;
        deny all;
    }
}
