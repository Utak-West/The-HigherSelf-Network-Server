# HigherSelf Network Server - Docker Compose with Secrets Management
# Enterprise-grade deployment with HashiCorp Vault and Docker Secrets

version: '3.8'

# Docker secrets for sensitive data
secrets:
  notion_api_token:
    external: true
    name: higherself-notion-api-token-${ENVIRONMENT:-development}
  
  openai_api_key:
    external: true
    name: higherself-openai-api-key-${ENVIRONMENT:-development}
  
  mongodb_password:
    external: true
    name: higherself-mongodb-password-${ENVIRONMENT:-development}
  
  redis_password:
    external: true
    name: higherself-redis-password-${ENVIRONMENT:-development}
  
  jwt_secret_key:
    external: true
    name: higherself-jwt-secret-${ENVIRONMENT:-development}
  
  webhook_secret:
    external: true
    name: higherself-webhook-secret-${ENVIRONMENT:-development}
  
  vault_token:
    external: true
    name: higherself-vault-token-${ENVIRONMENT:-development}

services:
  # HashiCorp Vault for secrets management
  vault:
    image: hashicorp/vault:1.15
    container_name: higherself-vault-${ENVIRONMENT:-development}
    restart: unless-stopped
    ports:
      - "${VAULT_PORT:-8200}:8200"
    environment:
      VAULT_DEV_ROOT_TOKEN_ID: ${VAULT_ROOT_TOKEN:-dev-root-token}
      VAULT_DEV_LISTEN_ADDRESS: 0.0.0.0:8200
      VAULT_ADDR: http://0.0.0.0:8200
    cap_add:
      - IPC_LOCK
    volumes:
      - vault_data:/vault/data
      - vault_logs:/vault/logs
      - ./deployment/vault:/vault/config:ro
    command: vault server -config=/vault/config/vault.hcl
    networks:
      - higherself_network
    healthcheck:
      test: ["CMD", "vault", "status"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.vault.rule=Host(`vault.${DOMAIN:-localhost}`)"
      - "traefik.http.services.vault.loadbalancer.server.port=8200"

  # Main application with secrets integration
  windsurf-agent:
    build:
      context: .
      dockerfile: Dockerfile
      args:
        ENVIRONMENT: ${ENVIRONMENT:-development}
    container_name: higherself-app-${ENVIRONMENT:-development}
    restart: unless-stopped
    depends_on:
      vault:
        condition: service_healthy
      mongodb:
        condition: service_healthy
      redis:
        condition: service_healthy
    environment:
      # Environment configuration
      ENVIRONMENT: ${ENVIRONMENT:-development}
      LOG_LEVEL: ${LOG_LEVEL:-INFO}
      
      # Secrets management configuration
      SECRETS_BACKEND: vault
      VAULT_ADDR: http://vault:8200
      VAULT_NAMESPACE: higherself
      ENABLE_SECRETS_ROTATION: ${ENABLE_SECRETS_ROTATION:-true}
      
      # Database configuration (non-sensitive)
      MONGODB_URI: mongodb://higherself_app@mongodb:27017/higherselfnetwork
      MONGODB_DB_NAME: higherselfnetwork
      REDIS_URI: redis://redis:6379/0
      
      # Server configuration
      SERVER_HOST: 0.0.0.0
      SERVER_PORT: 8000
      
      # Feature flags
      ENABLE_REDIS: true
      ENABLE_MONGODB: true
      DISABLE_WEBHOOKS: false
    secrets:
      - notion_api_token
      - openai_api_key
      - mongodb_password
      - redis_password
      - jwt_secret_key
      - webhook_secret
      - vault_token
    volumes:
      - app_logs:/app/logs
      - app_data:/app/data
      - /run/secrets:/run/secrets:ro
    networks:
      - higherself_network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.app.rule=Host(`api.${DOMAIN:-localhost}`)"
      - "traefik.http.services.app.loadbalancer.server.port=8000"

  # MongoDB with secret-based authentication
  mongodb:
    image: mongo:6.0
    container_name: higherself-mongodb-${ENVIRONMENT:-development}
    restart: unless-stopped
    environment:
      MONGO_INITDB_ROOT_USERNAME: admin
      MONGO_INITDB_ROOT_PASSWORD_FILE: /run/secrets/mongodb_password
      MONGO_INITDB_DATABASE: higherselfnetwork
    secrets:
      - mongodb_password
    volumes:
      - mongodb_data:/data/db
      - mongodb_logs:/var/log/mongodb
      - ./deployment/mongodb/init-mongo.js:/docker-entrypoint-initdb.d/init-mongo.js:ro
    networks:
      - higherself_network
    healthcheck:
      test: ["CMD", "mongosh", "--eval", "db.adminCommand('ping')"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s

  # Redis with secret-based authentication
  redis:
    image: redis:7.0-alpine
    container_name: higherself-redis-${ENVIRONMENT:-development}
    restart: unless-stopped
    command: >
      sh -c "
        if [ -f /run/secrets/redis_password ]; then
          redis-server --requirepass $$(cat /run/secrets/redis_password) --appendonly yes
        else
          redis-server --appendonly yes
        fi
      "
    secrets:
      - redis_password
    volumes:
      - redis_data:/data
      - ./deployment/redis/redis.conf:/usr/local/etc/redis/redis.conf:ro
    networks:
      - higherself_network
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s

  # Secrets rotation service
  secrets-rotator:
    build:
      context: .
      dockerfile: Dockerfile.secrets-rotator
    container_name: higherself-secrets-rotator-${ENVIRONMENT:-development}
    restart: unless-stopped
    depends_on:
      vault:
        condition: service_healthy
    environment:
      ENVIRONMENT: ${ENVIRONMENT:-development}
      VAULT_ADDR: http://vault:8200
      ROTATION_SCHEDULE: ${ROTATION_SCHEDULE:-0 2 * * *}  # Daily at 2 AM
      NOTIFICATION_EMAIL: ${NOTIFICATION_EMAIL:-admin@higherself.network}
    secrets:
      - vault_token
    volumes:
      - secrets_logs:/app/logs
    networks:
      - higherself_network
    profiles:
      - production  # Only run in production

  # Nginx reverse proxy with SSL termination
  nginx:
    image: nginx:alpine
    container_name: higherself-nginx-${ENVIRONMENT:-development}
    restart: unless-stopped
    depends_on:
      - windsurf-agent
    ports:
      - "${HTTP_PORT:-80}:80"
      - "${HTTPS_PORT:-443}:443"
    volumes:
      - ./deployment/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./deployment/ssl:/etc/nginx/ssl:ro
      - nginx_logs:/var/log/nginx
    networks:
      - higherself_network
    healthcheck:
      test: ["CMD", "nginx", "-t"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Monitoring and metrics
  prometheus:
    image: prom/prometheus:latest
    container_name: higherself-prometheus-${ENVIRONMENT:-development}
    restart: unless-stopped
    ports:
      - "${PROMETHEUS_PORT:-9090}:9090"
    volumes:
      - ./deployment/prometheus/prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - prometheus_data:/prometheus
    networks:
      - higherself_network
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--web.enable-lifecycle'

  grafana:
    image: grafana/grafana:latest
    container_name: higherself-grafana-${ENVIRONMENT:-development}
    restart: unless-stopped
    depends_on:
      - prometheus
    ports:
      - "${GRAFANA_PORT:-3000}:3000"
    environment:
      GF_SECURITY_ADMIN_PASSWORD_FILE: /run/secrets/grafana_admin_password
    secrets:
      - source: grafana_admin_password
        target: grafana_admin_password
    volumes:
      - grafana_data:/var/lib/grafana
      - ./deployment/grafana/provisioning:/etc/grafana/provisioning:ro
    networks:
      - higherself_network

# Additional secrets for monitoring
secrets:
  grafana_admin_password:
    external: true
    name: higherself-grafana-password-${ENVIRONMENT:-development}

# Named volumes for data persistence
volumes:
  vault_data:
    name: higherself-vault-data-${ENVIRONMENT:-development}
  vault_logs:
    name: higherself-vault-logs-${ENVIRONMENT:-development}
  mongodb_data:
    name: higherself-mongodb-data-${ENVIRONMENT:-development}
  mongodb_logs:
    name: higherself-mongodb-logs-${ENVIRONMENT:-development}
  redis_data:
    name: higherself-redis-data-${ENVIRONMENT:-development}
  app_logs:
    name: higherself-app-logs-${ENVIRONMENT:-development}
  app_data:
    name: higherself-app-data-${ENVIRONMENT:-development}
  secrets_logs:
    name: higherself-secrets-logs-${ENVIRONMENT:-development}
  nginx_logs:
    name: higherself-nginx-logs-${ENVIRONMENT:-development}
  prometheus_data:
    name: higherself-prometheus-data-${ENVIRONMENT:-development}
  grafana_data:
    name: higherself-grafana-data-${ENVIRONMENT:-development}

# Networks
networks:
  higherself_network:
    name: higherself-network-${ENVIRONMENT:-development}
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16
