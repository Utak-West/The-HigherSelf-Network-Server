# HigherSelf Network Server - Unified Docker Compose Configuration
# Enterprise automation platform supporting multi-business entity workflows
# Integrates The 7 Space, A.M. Consulting, and HigherSelf Core business entities

services:
  # Main application server - Enterprise automation platform
  higherself-server:
    image: thehigherselfnetworkserver:${IMAGE_TAG:-latest}
    build:
      context: .
      dockerfile: ./Dockerfile
      args:
        ENVIRONMENT: ${ENVIRONMENT:-development}
        BUILD_VERSION: ${BUILD_VERSION:-dev}
    container_name: higherself-server-${ENVIRONMENT:-dev}
    ports:
      - "${SERVER_PORT:-8000}:8000"
      - "${HTTPS_PORT:-8443}:8443"  # HTTPS support for production
    environment:
      # Core application settings
      - RUNNING_IN_CONTAINER=true
      - PYTHONUNBUFFERED=1
      - ENVIRONMENT=${ENVIRONMENT:-development}
      - DEBUG=${DEBUG:-false}
      - LOG_LEVEL=${LOG_LEVEL:-INFO}
      - TESTING=${TESTING:-false}

      # Multi-entity configuration
      - MULTI_ENTITY_MODE=${MULTI_ENTITY_MODE:-true}
      - PRIMARY_BUSINESS_ENTITY=${PRIMARY_BUSINESS_ENTITY:-the_7_space}
      - BUSINESS_ENTITY_ISOLATION=${BUSINESS_ENTITY_ISOLATION:-true}

      # Database connections with environment-specific databases
      - MONGODB_URI=mongodb://${MONGODB_USERNAME:-higherself_user}:${MONGODB_PASSWORD:-secure_password}@mongodb:27017/${MONGODB_DB_NAME:-higherself_${ENVIRONMENT:-dev}}
      - REDIS_URI=redis://:${REDIS_PASSWORD:-}@redis:6379/${REDIS_DB:-0}
      - CONSUL_HTTP_ADDR=consul:8500

      # Business entity enablement flags
      - THE_7_SPACE_ENABLED=${THE_7_SPACE_ENABLED:-true}
      - AM_CONSULTING_ENABLED=${AM_CONSULTING_ENABLED:-true}
      - HIGHERSELF_CORE_ENABLED=${HIGHERSELF_CORE_ENABLED:-true}

      # Service integration flags
      - ENABLE_REDIS=${ENABLE_REDIS:-true}
      - ENABLE_MONGODB=${ENABLE_MONGODB:-true}
      - DISABLE_WEBHOOKS=${DISABLE_WEBHOOKS:-false}
      - ENABLE_MONITORING=${ENABLE_MONITORING:-true}
      - ENABLE_SECRETS_ROTATION=${ENABLE_SECRETS_ROTATION:-false}

      # Secrets management configuration
      - SECRETS_BACKEND=${SECRETS_BACKEND:-env_file}
      - SECRETS_FALLBACK_BACKEND=${SECRETS_FALLBACK_BACKEND:-vault}
      - VAULT_ADDR=${VAULT_ADDR:-http://vault:8200}

      # Server configuration
      - SERVER_HOST=${SERVER_HOST:-0.0.0.0}
      - SERVER_WORKERS=${SERVER_WORKERS:-4}
      - SERVER_RELOAD=${SERVER_RELOAD:-false}
      - WEBHOOK_SECRET=${WEBHOOK_SECRET:-}
    env_file:
      - .env
      - .env.${ENVIRONMENT:-development}
    volumes:
      - ./logs/${ENVIRONMENT:-dev}:/app/logs
      - ./data/${ENVIRONMENT:-dev}:/app/data
      - ./config:/app/config:ro
      - ./backups:/app/backups
      - /run/secrets:/run/secrets:ro  # Docker secrets support
    networks:
      - higherself_network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 30s
      retries: 5
      start_period: 60s
    restart: unless-stopped
    depends_on:
      mongodb:
        condition: service_healthy
      redis:
        condition: service_healthy
      consul:
        condition: service_healthy
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.api.rule=Host(`${API_DOMAIN:-localhost}`)"
      - "traefik.http.services.api.loadbalancer.server.port=8000"
      - "prometheus.scrape=true"
      - "prometheus.port=8000"
      - "prometheus.path=/metrics"
      - "com.higherself.service=api"
      - "com.higherself.environment=${ENVIRONMENT:-development}"

  # Background task worker - Celery worker for async processing
  celery-worker:
    image: thehigherselfnetworkserver:${IMAGE_TAG:-latest}
    environment:
      - RUNNING_IN_CONTAINER=true
      - PYTHONUNBUFFERED=1
      - ENVIRONMENT=${ENVIRONMENT:-development}
      - MONGODB_URI=mongodb://${MONGODB_USERNAME:-higherself_user}:${MONGODB_PASSWORD:-secure_password}@mongodb:27017/${MONGODB_DB_NAME:-higherself_${ENVIRONMENT:-dev}}
      - REDIS_URI=redis://:${REDIS_PASSWORD:-}@redis:6379/${REDIS_DB:-0}
      - CONSUL_HTTP_ADDR=consul:8500
      - CELERY_WORKER_CONCURRENCY=${CELERY_WORKER_CONCURRENCY:-4}
      - CELERY_WORKER_LOGLEVEL=${CELERY_WORKER_LOGLEVEL:-info}
    env_file:
      - .env
      - .env.${ENVIRONMENT:-development}
    volumes:
      - ./logs/${ENVIRONMENT:-dev}:/app/logs
      - ./data/${ENVIRONMENT:-dev}:/app/data
      - ./config:/app/config:ro
    networks:
      - higherself_network
    depends_on:
      redis:
        condition: service_healthy
      mongodb:
        condition: service_healthy
    restart: unless-stopped
    command: celery -A services.task_queue_service:task_queue worker --loglevel=${CELERY_WORKER_LOGLEVEL:-info} --concurrency=${CELERY_WORKER_CONCURRENCY:-4}
    labels:
      - "com.higherself.service=worker"
      - "com.higherself.environment=${ENVIRONMENT:-development}"

  # Task scheduler - Celery beat for scheduled tasks
  celery-beat:
    image: thehigherselfnetworkserver:${IMAGE_TAG:-latest}
    environment:
      - RUNNING_IN_CONTAINER=true
      - PYTHONUNBUFFERED=1
      - ENVIRONMENT=${ENVIRONMENT:-development}
      - MONGODB_URI=mongodb://${MONGODB_USERNAME:-higherself_user}:${MONGODB_PASSWORD:-secure_password}@mongodb:27017/${MONGODB_DB_NAME:-higherself_${ENVIRONMENT:-dev}}
      - REDIS_URI=redis://:${REDIS_PASSWORD:-}@redis:6379/${REDIS_DB:-0}
      - CONSUL_HTTP_ADDR=consul:8500
    env_file:
      - .env
      - .env.${ENVIRONMENT:-development}
    volumes:
      - ./logs/${ENVIRONMENT:-dev}:/app/logs
      - ./data/${ENVIRONMENT:-dev}:/app/data
      - ./config:/app/config:ro
    networks:
      - higherself_network
    depends_on:
      redis:
        condition: service_healthy
      celery-worker:
        condition: service_started
    restart: unless-stopped
    command: celery -A services.task_queue_service:task_queue beat --loglevel=info
    labels:
      - "com.higherself.service=scheduler"
      - "com.higherself.environment=${ENVIRONMENT:-development}"

  # Reverse proxy and load balancer - Nginx
  nginx:
    image: nginx:alpine
    ports:
      - "${HTTP_PORT:-80}:80"
      - "${HTTPS_PORT_NGINX:-443}:443"
    volumes:
      - ./deployment/nginx/nginx.conf:/etc/nginx/conf.d/default.conf:ro
      - ./deployment/nginx/ssl:/etc/nginx/ssl:ro
      - ./logs/${ENVIRONMENT:-dev}/nginx:/var/log/nginx
    networks:
      - higherself_network
    depends_on:
      higherself-server:
        condition: service_healthy
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "nginx", "-t"]
      interval: 30s
      timeout: 10s
      retries: 3
    labels:
      - "com.higherself.service=proxy"
      - "com.higherself.environment=${ENVIRONMENT:-development}"

  # Primary database - MongoDB with replica set support
  mongodb:
    image: mongo:6.0
    container_name: higherself-mongodb-${ENVIRONMENT:-dev}
    ports:
      - "${MONGODB_PORT:-27017}:27017"
    volumes:
      - mongodb_data_development:/data/db
      - ./deployment/mongodb:/docker-entrypoint-initdb.d:ro
      - ./logs/${ENVIRONMENT:-dev}/mongodb:/var/log/mongodb
      - ./backups/mongodb:/backups
    environment:
      - MONGO_INITDB_ROOT_USERNAME=${MONGODB_ROOT_USER:-admin}
      - MONGO_INITDB_ROOT_PASSWORD=${MONGODB_ROOT_PASSWORD:-secure_root_password}
      - MONGO_INITDB_DATABASE=${MONGODB_DB_NAME:-higherself_${ENVIRONMENT:-dev}}
      - MONGO_APP_USER=${MONGODB_USERNAME:-higherself_user}
      - MONGO_APP_PASSWORD=${MONGODB_PASSWORD:-secure_password}
    networks:
      - higherself_network
    healthcheck:
      test: |
        echo 'try {
          db.runCommand("ping").ok ? 0 : 2
        } catch(err) {
          print("MongoDB health check failed: " + err);
          2
        }' | mongosh localhost:27017/${MONGODB_DB_NAME:-higherself_${ENVIRONMENT:-dev}} --quiet
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 40s
    restart: unless-stopped
    command:
      - "--auth"
      - "--bind_ip_all"
      - "--logpath"
      - "/var/log/mongodb/mongod.log"
      - "--logappend"
      - "--wiredTigerCacheSizeGB"
      - "${MONGODB_CACHE_SIZE:-1}"
    labels:
      - "prometheus.scrape=true"
      - "prometheus.port=27017"
      - "com.higherself.service=database"
      - "com.higherself.environment=${ENVIRONMENT:-development}"

  # Cache and message broker - Redis
  redis:
    image: redis:7.2-alpine
    ports:
      - "${REDIS_PORT:-6379}:6379"
    volumes:
      - redis_data_development:/data
      - ./deployment/redis/redis.conf:/usr/local/etc/redis/redis.conf:ro
      - ./logs/${ENVIRONMENT:-dev}/redis:/var/log/redis
    networks:
      - higherself_network
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 5s
      retries: 5
      start_period: 10s
    restart: unless-stopped
    command: redis-server /usr/local/etc/redis/redis.conf --requirepass ${REDIS_PASSWORD:-}
    labels:
      - "prometheus.scrape=true"
      - "prometheus.port=6379"
      - "com.higherself.service=cache"
      - "com.higherself.environment=${ENVIRONMENT:-development}"

  # Service discovery and configuration - Consul
  consul:
    image: hashicorp/consul:1.16
    ports:
      - "${CONSUL_PORT:-8500}:8500"
    volumes:
      - consul_data_development:/consul/data
      - ./logs/${ENVIRONMENT:-dev}/consul:/consul/logs
    networks:
      - higherself_network
    command: >
      agent -server -ui -client=0.0.0.0 -bootstrap-expect=1
      -data-dir=/consul/data -log-file=/consul/logs/consul.log
    environment:
      - CONSUL_BIND_INTERFACE=eth0
      - CONSUL_CLIENT_INTERFACE=eth0
    healthcheck:
      test: ["CMD", "consul", "members"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 20s
    restart: unless-stopped
    labels:
      - "com.higherself.service=discovery"
      - "com.higherself.environment=${ENVIRONMENT:-development}"

  # Metrics collection - Prometheus
  prometheus:
    image: prom/prometheus:v2.47.0
    ports:
      - "${PROMETHEUS_PORT:-9090}:9090"
    volumes:
      - ./deployment/prometheus:/etc/prometheus:ro
      - prometheus_data_development:/prometheus
      - ./logs/${ENVIRONMENT:-dev}/prometheus:/var/log/prometheus
    networks:
      - higherself_network
    command:
      - "--config.file=/etc/prometheus/prometheus.yml"
      - "--storage.tsdb.path=/prometheus"
      - "--web.console.libraries=/etc/prometheus/console_libraries"
      - "--web.console.templates=/etc/prometheus/consoles"
      - "--web.enable-lifecycle"
      - "--storage.tsdb.retention.time=${PROMETHEUS_RETENTION:-30d}"
      - "--web.enable-admin-api"
    depends_on:
      higherself-server:
        condition: service_healthy
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:9090/-/healthy"]
      interval: 30s
      timeout: 10s
      retries: 3
    labels:
      - "com.higherself.service=monitoring"
      - "com.higherself.environment=${ENVIRONMENT:-development}"

  # Visualization and alerting - Grafana
  grafana:
    image: grafana/grafana:10.1.0
    ports:
      - "${GRAFANA_PORT:-3000}:3000"
    volumes:
      - ./deployment/grafana/provisioning:/etc/grafana/provisioning:ro
      - grafana_data_development:/var/lib/grafana
      - ./logs/${ENVIRONMENT:-dev}/grafana:/var/log/grafana
    networks:
      - higherself_network
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=${GRAFANA_ADMIN_PASSWORD:-admin}
      - GF_SERVER_ROOT_URL=%(protocol)s://%(domain)s:%(http_port)s/grafana/
      - GF_SERVER_SERVE_FROM_SUB_PATH=true
      - GF_INSTALL_PLUGINS=${GRAFANA_PLUGINS:-}
      - GF_LOG_LEVEL=${GRAFANA_LOG_LEVEL:-info}
    depends_on:
      prometheus:
        condition: service_healthy
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:3000/api/health || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 3
    labels:
      - "com.higherself.service=visualization"
      - "com.higherself.environment=${ENVIRONMENT:-development}"

  # Optional: HashiCorp Vault for secrets management (production)
  vault:
    image: hashicorp/vault:1.15.0
    ports:
      - "${VAULT_PORT:-8200}:8200"
    volumes:
      - vault_data_development:/vault/data
      - ./deployment/vault:/vault/config:ro
      - ./logs/${ENVIRONMENT:-dev}/vault:/vault/logs
    networks:
      - higherself_network
    environment:
      - VAULT_DEV_ROOT_TOKEN_ID=${VAULT_ROOT_TOKEN:-dev-root-token}
      - VAULT_DEV_LISTEN_ADDRESS=0.0.0.0:8200
      - VAULT_LOG_LEVEL=${VAULT_LOG_LEVEL:-info}
    cap_add:
      - IPC_LOCK
    command: vault server -dev -dev-listen-address=0.0.0.0:8200
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "vault", "status"]
      interval: 30s
      timeout: 10s
      retries: 3
    profiles:
      - vault
      - production
    labels:
      - "com.higherself.service=secrets"
      - "com.higherself.environment=${ENVIRONMENT:-development}"

# Named volumes for persistent data storage
volumes:
  # Environment-specific data volumes
  mongodb_data_dev:
    driver: local
    labels:
      - "com.higherself.volume=mongodb"
      - "com.higherself.environment=dev"
  mongodb_data_development:
    driver: local
    labels:
      - "com.higherself.volume=mongodb"
      - "com.higherself.environment=development"
  mongodb_data_staging:
    driver: local
    labels:
      - "com.higherself.volume=mongodb"
      - "com.higherself.environment=staging"
  mongodb_data_production:
    driver: local
    labels:
      - "com.higherself.volume=mongodb"
      - "com.higherself.environment=production"

  redis_data_dev:
    driver: local
    labels:
      - "com.higherself.volume=redis"
      - "com.higherself.environment=dev"
  redis_data_development:
    driver: local
    labels:
      - "com.higherself.volume=redis"
      - "com.higherself.environment=development"
  redis_data_staging:
    driver: local
    labels:
      - "com.higherself.volume=redis"
      - "com.higherself.environment=staging"
  redis_data_production:
    driver: local
    labels:
      - "com.higherself.volume=redis"
      - "com.higherself.environment=production"

  consul_data_dev:
    driver: local
    labels:
      - "com.higherself.volume=consul"
      - "com.higherself.environment=dev"
  consul_data_development:
    driver: local
    labels:
      - "com.higherself.volume=consul"
      - "com.higherself.environment=development"
  consul_data_staging:
    driver: local
    labels:
      - "com.higherself.volume=consul"
      - "com.higherself.environment=staging"
  consul_data_production:
    driver: local
    labels:
      - "com.higherself.volume=consul"
      - "com.higherself.environment=production"

  prometheus_data_dev:
    driver: local
    labels:
      - "com.higherself.volume=prometheus"
      - "com.higherself.environment=dev"
  prometheus_data_development:
    driver: local
    labels:
      - "com.higherself.volume=prometheus"
      - "com.higherself.environment=development"
  prometheus_data_staging:
    driver: local
    labels:
      - "com.higherself.volume=prometheus"
      - "com.higherself.environment=staging"
  prometheus_data_production:
    driver: local
    labels:
      - "com.higherself.volume=prometheus"
      - "com.higherself.environment=production"

  grafana_data_dev:
    driver: local
    labels:
      - "com.higherself.volume=grafana"
      - "com.higherself.environment=dev"
  grafana_data_development:
    driver: local
    labels:
      - "com.higherself.volume=grafana"
      - "com.higherself.environment=development"
  grafana_data_staging:
    driver: local
    labels:
      - "com.higherself.volume=grafana"
      - "com.higherself.environment=staging"
  grafana_data_production:
    driver: local
    labels:
      - "com.higherself.volume=grafana"
      - "com.higherself.environment=production"

  vault_data_dev:
    driver: local
    labels:
      - "com.higherself.volume=vault"
      - "com.higherself.environment=dev"
  vault_data_development:
    driver: local
    labels:
      - "com.higherself.volume=vault"
      - "com.higherself.environment=development"
  vault_data_staging:
    driver: local
    labels:
      - "com.higherself.volume=vault"
      - "com.higherself.environment=staging"
  vault_data_production:
    driver: local
    labels:
      - "com.higherself.volume=vault"
      - "com.higherself.environment=production"

# Networks for service communication
networks:
  higherself_network:
    driver: bridge
    name: higherself-network-${ENVIRONMENT:-dev}
    labels:
      - "com.higherself.network=main"
      - "com.higherself.environment=${ENVIRONMENT:-development}"
    ipam:
      driver: default
      config:
        - subnet: ${NETWORK_SUBNET:-172.20.0.0/16}

# Docker secrets for production deployment
secrets:
  notion_api_token:
    external: true
    name: higherself-notion-api-token-${ENVIRONMENT:-dev}
  openai_api_key:
    external: true
    name: higherself-openai-api-key-${ENVIRONMENT:-dev}
  mongodb_password:
    external: true
    name: higherself-mongodb-password-${ENVIRONMENT:-dev}
  redis_password:
    external: true
    name: higherself-redis-password-${ENVIRONMENT:-dev}
  jwt_secret_key:
    external: true
    name: higherself-jwt-secret-${ENVIRONMENT:-dev}
  webhook_secret:
    external: true
    name: higherself-webhook-secret-${ENVIRONMENT:-dev}
  vault_token:
    external: true
    name: higherself-vault-token-${ENVIRONMENT:-dev}
