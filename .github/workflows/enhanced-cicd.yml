name: Enhanced CI/CD Pipeline - HigherSelf Network Server

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:
    inputs:
      environment:
        description: 'Deployment environment'
        required: true
        default: 'staging'
        type: choice
        options:
        - staging
        - production
      skip_tests:
        description: 'Skip test execution'
        required: false
        default: false
        type: boolean

permissions:
  contents: write
  packages: write
  id-token: write
  security-events: write
  actions: read

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository_owner }}/higherself-network-server
  BASE_IMAGE_NAME: thehigherselfnetworkserver
  DOCKER_BUILDKIT: 1
  BUILDX_NO_DEFAULT_ATTESTATIONS: 1

jobs:
  # Pre-flight checks and validation
  pre-flight:
    runs-on: ubuntu-latest
    outputs:
      version: ${{ steps.version.outputs.version }}
      should_deploy: ${{ steps.deploy_check.outputs.should_deploy }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Generate version
        id: version
        run: |
          if [[ "${{ github.event_name }}" == "workflow_dispatch" ]]; then
            VERSION="${{ github.event.inputs.environment }}-$(date +%Y%m%d-%H%M%S)"
          else
            VERSION="$(date +%Y%m%d-%H%M%S)-${GITHUB_SHA::8}"
          fi
          echo "version=$VERSION" >> $GITHUB_OUTPUT
          echo "Generated version: $VERSION"

      - name: Check deployment conditions
        id: deploy_check
        run: |
          if [[ "${{ github.event_name }}" == "push" && "${{ github.ref }}" == "refs/heads/main" ]]; then
            echo "should_deploy=true" >> $GITHUB_OUTPUT
          elif [[ "${{ github.event_name }}" == "workflow_dispatch" ]]; then
            echo "should_deploy=true" >> $GITHUB_OUTPUT
          else
            echo "should_deploy=false" >> $GITHUB_OUTPUT
          fi

      - name: Validate configuration files
        run: |
          echo "Validating Docker configuration..."
          docker-compose config -q

          echo "Validating environment template..."
          if [ ! -f .env.example ]; then
            echo "Warning: .env.example not found"
          fi

          echo "Checking required files..."
          required_files=("Dockerfile" "requirements.txt" "main.py")
          for file in "${required_files[@]}"; do
            if [ ! -f "$file" ]; then
              echo "Error: Required file $file not found"
              exit 1
            fi
          done

  # Code quality and security checks
  quality-checks:
    runs-on: ubuntu-latest
    needs: pre-flight
    if: ${{ !github.event.inputs.skip_tests }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'
          cache: 'pip'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install pytest pytest-asyncio pytest-mock black flake8 bandit safety

      - name: Code formatting check
        run: |
          echo "Checking code formatting with Black..."
          black --check --diff . || true

      - name: Lint with flake8
        run: |
          echo "Running flake8 linting..."
          flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics || true
          flake8 . --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics

      - name: Security scan with Bandit
        run: |
          echo "Running security scan with Bandit..."
          bandit -r . -f json -o bandit-report.json || true
          bandit -r . --severity-level medium || true

      - name: Dependency vulnerability check
        run: |
          echo "Checking for known vulnerabilities in dependencies..."
          safety check --json --output safety-report.json || true
          safety check || true

      - name: Upload security reports
        uses: actions/upload-artifact@v3
        if: always()
        with:
          name: security-reports
          path: |
            bandit-report.json
            safety-report.json

  # Automated testing suite
  test-suite:
    runs-on: ubuntu-latest
    needs: [pre-flight, quality-checks]
    if: ${{ !github.event.inputs.skip_tests }}
    services:
      redis:
        image: redis:7.2-alpine
        ports:
          - 6379:6379
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'
          cache: 'pip'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt

      - name: Run unit tests
        env:
          TEST_MODE: "True"
          TESTING_MODE: "True"
          DISABLE_WEBHOOKS: "True"
          REDIS_URI: "redis://localhost:6379/0"
          NOTION_API_TOKEN: "test_token_12345678901234567890123456789012345678901234567890"
        run: |
          echo "Running unit tests..."
          python -m pytest tests/ -v --tb=short --maxfail=5 || true

      - name: Run integration tests
        env:
          TEST_MODE: "True"
          TESTING_MODE: "True"
          DISABLE_WEBHOOKS: "True"
          REDIS_URI: "redis://localhost:6379/0"
          NOTION_API_TOKEN: "test_token_12345678901234567890123456789012345678901234567890"
        run: |
          echo "Running integration tests..."
          python -m pytest tests/integration/ -v --tb=short || true

      - name: Test automation flows
        env:
          TEST_MODE: "True"
          TESTING_MODE: "True"
          DISABLE_WEBHOOKS: "True"
          NOTION_API_TOKEN: "test_token_12345678901234567890123456789012345678901234567890"
        run: |
          echo "Testing automation flows..."
          python tools/test_automation_flows.py --test-mode || true

      - name: Generate test report
        if: always()
        run: |
          echo "Test execution completed"
          echo "Results will be available in workflow logs"

  # Build and push Docker image
  build:
    runs-on: ubuntu-latest
    needs: [pre-flight]
    if: ${{ needs.pre-flight.outputs.should_deploy == 'true' }}
    outputs:
      image_tag: ${{ steps.meta.outputs.tags }}
      image_digest: ${{ steps.build.outputs.digest }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Login to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.repository_owner }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: |
            ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
            ${{ env.REGISTRY }}/${{ github.repository_owner }}/${{ env.BASE_IMAGE_NAME }}
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=sha,prefix={{branch}}-
            type=raw,value=latest,enable={{is_default_branch}}
            type=raw,value=${{ needs.pre-flight.outputs.version }}
            type=raw,value=stable,enable={{is_default_branch}}
            type=semver,pattern={{version}}
            type=semver,pattern={{major}}.{{minor}}
            type=schedule,pattern={{date 'YYYYMMDD'}}
          labels: |
            org.opencontainers.image.title=HigherSelf Network Server
            org.opencontainers.image.description=Enterprise automation platform for multi-business entity management
            org.opencontainers.image.vendor=HigherSelf Network
            org.opencontainers.image.licenses=MIT
            org.opencontainers.image.documentation=https://github.com/${{ github.repository }}/blob/main/docs/README.md
            com.higherself.version=${{ needs.pre-flight.outputs.version }}
            com.higherself.build-date=${{ github.event.head_commit.timestamp }}
            com.higherself.vcs-ref=${{ github.sha }}
            com.higherself.business-entities=the_7_space,am_consulting,higherself_core

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
        with:
          platforms: linux/amd64,linux/arm64
          driver-opts: |
            network=host

      - name: Build and push Docker image
        id: build
        uses: docker/build-push-action@v5
        with:
          context: .
          platforms: linux/amd64,linux/arm64
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: |
            type=gha,scope=buildkit
            type=registry,ref=${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:cache
          cache-to: |
            type=gha,scope=buildkit,mode=max
            type=registry,ref=${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:cache,mode=max
          build-args: |
            VERSION=${{ needs.pre-flight.outputs.version }}
            BUILD_DATE=${{ github.event.head_commit.timestamp }}
            VCS_REF=${{ github.sha }}
            BUILDKIT_INLINE_CACHE=1
          provenance: false
          sbom: true
          outputs: type=image,name=${{ env.REGISTRY }}/${{ env.IMAGE_NAME }},push=true

      - name: Generate SBOM
        uses: anchore/sbom-action@v0
        with:
          image: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ needs.pre-flight.outputs.version }}
          format: spdx-json
          output-file: sbom.spdx.json

      - name: Upload SBOM
        uses: actions/upload-artifact@v4
        with:
          name: sbom-${{ needs.pre-flight.outputs.version }}
          path: sbom.spdx.json
          retention-days: 30

      - name: Attest SBOM
        uses: actions/attest-sbom@v1
        with:
          subject-name: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
          subject-digest: ${{ steps.build.outputs.digest }}
          sbom-path: sbom.spdx.json
          push-to-registry: true

      - name: Update deployment status
        if: success()
        run: |
          echo "Docker image built successfully"
          echo "Image: ${{ steps.meta.outputs.tags }}"
          echo "Digest: ${{ steps.build.outputs.digest }}"
          echo "SBOM generated and attested"

  # Security scanning
  security-scan:
    runs-on: ubuntu-latest
    needs: [pre-flight, build]
    if: ${{ needs.pre-flight.outputs.should_deploy == 'true' }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ github.sha }}
          format: 'sarif'
          output: 'trivy-results.sarif'

      - name: Upload Trivy scan results to GitHub Security tab
        uses: github/codeql-action/upload-sarif@v2
        if: always()
        with:
          sarif_file: 'trivy-results.sarif'

      - name: Run Trivy in table format
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ github.sha }}
          format: 'table'
          exit-code: '0'
          ignore-unfixed: true
          severity: 'CRITICAL,HIGH'
          timeout: '10m'

  # Deployment to staging/production
  deploy:
    runs-on: ubuntu-latest
    needs: [pre-flight, build, security-scan]
    if: ${{ needs.pre-flight.outputs.should_deploy == 'true' }}
    environment: ${{ github.event.inputs.environment || 'staging' }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Deploy to environment
        run: |
          echo "Deploying to ${{ github.event.inputs.environment || 'staging' }}"
          echo "Image: ${{ needs.build.outputs.image_tag }}"
          # Add actual deployment logic here

      - name: Send deployment notification
        if: always()
        uses: ./.github/actions/termius-notification
        with:
          webhook_url: ${{ secrets.TERMIUS_WEBHOOK_URL }}
          status: ${{ job.status }}
          environment: ${{ github.event.inputs.environment || 'staging' }}
          image_tag: ${{ needs.build.outputs.image_tag }}
          commit_sha: ${{ github.sha }}

  # Notification job that runs regardless of other job outcomes
  notify:
    runs-on: ubuntu-latest
    needs: [pre-flight, quality-checks, test-suite, build, security-scan, deploy]
    if: always()
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Determine overall status
        id: status
        run: |
          if [[ "${{ needs.pre-flight.result }}" == "failure" || "${{ needs.quality-checks.result }}" == "failure" || "${{ needs.test-suite.result }}" == "failure" || "${{ needs.build.result }}" == "failure" || "${{ needs.security-scan.result }}" == "failure" || "${{ needs.deploy.result }}" == "failure" ]]; then
            echo "status=failure" >> $GITHUB_OUTPUT
          elif [[ "${{ needs.pre-flight.result }}" == "cancelled" || "${{ needs.quality-checks.result }}" == "cancelled" || "${{ needs.test-suite.result }}" == "cancelled" || "${{ needs.build.result }}" == "cancelled" || "${{ needs.security-scan.result }}" == "cancelled" || "${{ needs.deploy.result }}" == "cancelled" ]]; then
            echo "status=cancelled" >> $GITHUB_OUTPUT
          else
            echo "status=success" >> $GITHUB_OUTPUT
          fi

      - name: Send comprehensive notification
        uses: ./.github/actions/termius-notification
        with:
          webhook_url: ${{ secrets.TERMIUS_WEBHOOK_URL }}
          status: ${{ steps.status.outputs.status }}
          workflow_name: ${{ github.workflow }}
          branch: ${{ github.ref_name }}
          commit_sha: ${{ github.sha }}
          commit_message: ${{ github.event.head_commit.message }}
          actor: ${{ github.actor }}
          run_url: ${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}
          pre_flight_status: ${{ needs.pre-flight.result }}
          quality_checks_status: ${{ needs.quality-checks.result }}
          test_suite_status: ${{ needs.test-suite.result }}
          build_status: ${{ needs.build.result }}
          security_scan_status: ${{ needs.security-scan.result }}
          deploy_status: ${{ needs.deploy.result }}
