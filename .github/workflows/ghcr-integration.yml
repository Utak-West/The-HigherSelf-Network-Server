name: GHCR Integration - HigherSelf Network Server

on:
  push:
    branches: [ main, develop ]
    tags: [ 'v*' ]
  pull_request:
    branches: [ main ]
  schedule:
    # Build nightly at 2 AM UTC
    - cron: '0 2 * * *'
  workflow_dispatch:
    inputs:
      build_type:
        description: 'Type of build to perform'
        required: true
        default: 'standard'
        type: choice
        options:
        - standard
        - multi-arch
        - security-scan
        - performance-test
      tag_override:
        description: 'Override tag (optional)'
        required: false
        type: string
      push_to_registry:
        description: 'Push to registry'
        required: false
        default: true
        type: boolean

permissions:
  contents: read
  packages: write
  id-token: write
  security-events: write
  attestations: write

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository_owner }}/higherself-network-server
  BASE_IMAGE_NAME: ${{ github.repository_owner }}/thehigherselfnetworkserver

jobs:
  # Prepare build metadata
  prepare:
    runs-on: ubuntu-latest
    outputs:
      version: ${{ steps.meta.outputs.version }}
      tags: ${{ steps.meta.outputs.tags }}
      labels: ${{ steps.meta.outputs.labels }}
      platforms: ${{ steps.platforms.outputs.platforms }}
      should_push: ${{ steps.push_decision.outputs.should_push }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
        with:
          platforms: linux/amd64,linux/arm64

      - name: Determine platforms
        id: platforms
        run: |
          if [[ "${{ github.event.inputs.build_type }}" == "multi-arch" || "${{ github.event_name }}" == "schedule" ]]; then
            echo "platforms=linux/amd64,linux/arm64" >> $GITHUB_OUTPUT
          else
            echo "platforms=linux/amd64" >> $GITHUB_OUTPUT
          fi

      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: |
            ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
            ${{ env.REGISTRY }}/${{ env.BASE_IMAGE_NAME }}
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=semver,pattern={{version}}
            type=semver,pattern={{major}}.{{minor}}
            type=semver,pattern={{major}}
            type=sha,prefix={{branch}}-
            type=raw,value=latest,enable={{is_default_branch}}
            type=raw,value=stable,enable={{is_default_branch}}
            type=raw,value=nightly,enable=${{ github.event_name == 'schedule' }}
            type=raw,value=${{ github.event.inputs.tag_override }},enable=${{ github.event.inputs.tag_override != '' }}
          labels: |
            org.opencontainers.image.title=HigherSelf Network Server
            org.opencontainers.image.description=Enterprise automation platform for multi-business entity management
            org.opencontainers.image.vendor=HigherSelf Network
            org.opencontainers.image.licenses=MIT
            org.opencontainers.image.documentation=https://github.com/${{ github.repository }}/blob/main/docs/README.md
            com.higherself.version=${{ github.ref_name }}
            com.higherself.build-date=${{ github.event.head_commit.timestamp }}
            com.higherself.vcs-ref=${{ github.sha }}
            com.higherself.business-entities=the_7_space,am_consulting,higherself_core
            com.higherself.build-type=${{ github.event.inputs.build_type || 'standard' }}

      - name: Determine push decision
        id: push_decision
        run: |
          if [[ "${{ github.event_name }}" == "pull_request" ]]; then
            echo "should_push=false" >> $GITHUB_OUTPUT
          elif [[ "${{ github.event.inputs.push_to_registry }}" == "false" ]]; then
            echo "should_push=false" >> $GITHUB_OUTPUT
          else
            echo "should_push=true" >> $GITHUB_OUTPUT
          fi

  # Build and push Docker images
  build:
    runs-on: ubuntu-latest
    needs: prepare
    strategy:
      matrix:
        include:
          - name: main
            dockerfile: Dockerfile
            context: .
          - name: dev
            dockerfile: Dockerfile
            context: .
            target: development
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
        with:
          platforms: ${{ needs.prepare.outputs.platforms }}

      - name: Login to GitHub Container Registry
        if: needs.prepare.outputs.should_push == 'true'
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.repository_owner }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Build and push Docker image
        id: build
        uses: docker/build-push-action@v5
        with:
          context: ${{ matrix.context }}
          file: ${{ matrix.dockerfile }}
          platforms: ${{ needs.prepare.outputs.platforms }}
          target: ${{ matrix.target || '' }}
          push: ${{ needs.prepare.outputs.should_push }}
          tags: |
            ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ matrix.name }}
            ${{ env.REGISTRY }}/${{ env.BASE_IMAGE_NAME }}:${{ matrix.name }}
          labels: ${{ needs.prepare.outputs.labels }}
          cache-from: |
            type=gha,scope=buildkit-${{ matrix.name }}
            type=registry,ref=${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:cache-${{ matrix.name }}
          cache-to: |
            type=gha,scope=buildkit-${{ matrix.name }},mode=max
            type=registry,ref=${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:cache-${{ matrix.name }},mode=max
          build-args: |
            VERSION=${{ needs.prepare.outputs.version }}
            BUILD_DATE=${{ github.event.head_commit.timestamp }}
            VCS_REF=${{ github.sha }}
            BUILDKIT_INLINE_CACHE=1
          provenance: true
          sbom: true

      - name: Generate SBOM
        if: needs.prepare.outputs.should_push == 'true'
        uses: anchore/sbom-action@v0
        with:
          image: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ matrix.name }}
          format: spdx-json
          output-file: sbom-${{ matrix.name }}.spdx.json

      - name: Upload SBOM
        if: needs.prepare.outputs.should_push == 'true'
        uses: actions/upload-artifact@v4
        with:
          name: sbom-${{ matrix.name }}
          path: sbom-${{ matrix.name }}.spdx.json
          retention-days: 30

      - name: Attest SBOM
        if: needs.prepare.outputs.should_push == 'true'
        uses: actions/attest-sbom@v1
        with:
          subject-name: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
          subject-digest: ${{ steps.build.outputs.digest }}
          sbom-path: sbom-${{ matrix.name }}.spdx.json
          push-to-registry: true

  # Security scanning
  security-scan:
    runs-on: ubuntu-latest
    needs: [prepare, build]
    if: needs.prepare.outputs.should_push == 'true'
    strategy:
      matrix:
        scanner: [trivy, grype]
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Run Trivy vulnerability scanner
        if: matrix.scanner == 'trivy'
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:main
          format: 'sarif'
          output: 'trivy-results.sarif'

      - name: Upload Trivy scan results
        if: matrix.scanner == 'trivy'
        uses: github/codeql-action/upload-sarif@v2
        with:
          sarif_file: 'trivy-results.sarif'

      - name: Run Grype vulnerability scanner
        if: matrix.scanner == 'grype'
        uses: anchore/scan-action@v3
        with:
          image: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:main
          format: sarif
          output-file: grype-results.sarif

      - name: Upload Grype scan results
        if: matrix.scanner == 'grype'
        uses: github/codeql-action/upload-sarif@v2
        with:
          sarif_file: grype-results.sarif

  # Performance testing
  performance-test:
    runs-on: ubuntu-latest
    needs: [prepare, build]
    if: github.event.inputs.build_type == 'performance-test' || github.event_name == 'schedule'
    services:
      redis:
        image: redis:7.2-alpine
        ports:
          - 6379:6379
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Login to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.repository_owner }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Pull and test image
        run: |
          docker pull ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:main
          
          # Start container
          docker run -d --name test-container \
            -p 8000:8000 \
            -e ENVIRONMENT=test \
            -e REDIS_URI=redis://host.docker.internal:6379/0 \
            --add-host host.docker.internal:host-gateway \
            ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:main
          
          # Wait for startup
          sleep 30
          
          # Basic performance test
          curl -f http://localhost:8000/health
          
          # Load test with Apache Bench
          sudo apt-get update && sudo apt-get install -y apache2-utils
          ab -n 1000 -c 10 http://localhost:8000/health
          
          # Cleanup
          docker stop test-container
          docker rm test-container

  # Image promotion
  promote:
    runs-on: ubuntu-latest
    needs: [prepare, build, security-scan]
    if: github.ref == 'refs/heads/main' && needs.prepare.outputs.should_push == 'true'
    steps:
      - name: Login to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.repository_owner }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Promote images
        run: |
          # Pull main image
          docker pull ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:main
          
          # Tag as stable
          docker tag ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:main ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:stable
          docker tag ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:main ${{ env.REGISTRY }}/${{ env.BASE_IMAGE_NAME }}:stable
          
          # Push stable tags
          docker push ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:stable
          docker push ${{ env.REGISTRY }}/${{ env.BASE_IMAGE_NAME }}:stable

  # Cleanup old images
  cleanup:
    runs-on: ubuntu-latest
    needs: [prepare, build]
    if: github.event_name == 'schedule'
    steps:
      - name: Delete old images
        uses: actions/delete-package-versions@v4
        with:
          package-name: 'higherself-network-server'
          package-type: 'container'
          min-versions-to-keep: 10
          delete-only-untagged-versions: true

  # Notification
  notify:
    runs-on: ubuntu-latest
    needs: [prepare, build, security-scan, performance-test, promote, cleanup]
    if: always()
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Determine overall status
        id: status
        run: |
          if [[ "${{ needs.build.result }}" == "failure" || "${{ needs.security-scan.result }}" == "failure" ]]; then
            echo "status=failure" >> $GITHUB_OUTPUT
          elif [[ "${{ needs.build.result }}" == "cancelled" ]]; then
            echo "status=cancelled" >> $GITHUB_OUTPUT
          else
            echo "status=success" >> $GITHUB_OUTPUT
          fi

      - name: Send notification
        if: always()
        uses: ./.github/actions/termius-notification
        with:
          webhook_url: ${{ secrets.TERMIUS_WEBHOOK_URL }}
          status: ${{ steps.status.outputs.status }}
          workflow_name: "GHCR Integration"
          branch: ${{ github.ref_name }}
          commit_sha: ${{ github.sha }}
          commit_message: ${{ github.event.head_commit.message }}
          actor: ${{ github.actor }}
          run_url: ${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}
          build_status: ${{ needs.build.result }}
          security_scan_status: ${{ needs.security-scan.result }}
          performance_test_status: ${{ needs.performance-test.result }}
          promote_status: ${{ needs.promote.result }}
